diff --git a/configure.ac b/configure.ac
index 40428079..4992d29d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -532,17 +532,17 @@ gld_save_CPPFLAGS="$CPPFLAGS"; CPPFLAGS="$CPPFLAGS $HELICS_CPPFLAGS"
 # add libhelics to HELICS_LIBS if missing
 AS_CASE([$platform],
 	[*linux*], [AS_CASE([$HELICS_LIBS],
-					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelicsSharedLib"])
+					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelics"])
 				AS_CASE([$LIBS],
-					[*lhelics*], [], [LIBS="$LIBS -lhelicsSharedLib"])],
+					[*lhelics*], [], [LIBS="$LIBS -lhelics"])],
 	[*darwin*], [AS_CASE([$HELICS_LIBS],
-					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelicsSharedLib"])
+					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelics"])
 				AS_CASE([$LIBS],
-					[*lhelics*], [], [LIBS="$LIBS -lhelicsSharedLib"])],
+					[*lhelics*], [], [LIBS="$LIBS -lhelics"])],
 	[*windows*], [AS_CASE([$HELICS_LIBS],
-					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelicsSharedLib"])
+					[*lhelics*], [], [HELICS_LIBS="$HELICS_LIBS -lhelics"])
 				AS_CASE([$LIBS],
-					[*lhelics*], [], [LIBS="$LIBS -lhelicsSharedLib"])])
+					[*lhelics*], [], [LIBS="$LIBS -lhelics"])])
 have_helics=yes
 AC_MSG_CHECKING([for HELICS])
 AC_LINK_IFELSE(
diff --git a/connection/helics_msg.cpp b/connection/helics_msg.cpp
index 97c196f5..579c6b0a 100644
--- a/connection/helics_msg.cpp
+++ b/connection/helics_msg.cpp
@@ -103,9 +103,9 @@ void send_die(void)
 		//TODO find equivalent helics die message
 #if HAVE_HELICS
 		gl_verbose("helics_msg: Calling error");
-		const helics_federate_state fed_state = pHelicsFederate->getCurrentMode();
-		if(fed_state != helics_state_finalize) {
-			if(fed_state != helics_state_error) {
+		const HelicsFederateState fed_state = pHelicsFederate->getCurrentMode();
+		if(fed_state != HELICS_STATE_FINALIZE) {
+			if(fed_state != HELICS_STATE_ERROR) {
 				string fed_name = string(pHelicsFederate->getName());
 				string error_msg = fed_name + string(":The GridLAB-D Federate encountered an internal Error.");
 				pHelicsFederate->globalError((int)(exitCode.get_int16()), error_msg);
@@ -118,8 +118,8 @@ void send_die(void)
 		//TODO find equivalent helics clean exit message
 #if HAVE_HELICS
 		gl_verbose("helics_msg: Calling finalize\n");
-		const helics_federate_state fed_state = pHelicsFederate->getCurrentMode();
-		if(fed_state != helics_state_finalize) {
+		const HelicsFederateState fed_state = pHelicsFederate->getCurrentMode();
+		if(fed_state != HELICS_STATE_FINALIZE) {
 			pHelicsFederate->finalize();
 		}
 		helicscpp::cleanupHelicsLibrary();
@@ -182,7 +182,7 @@ int helics_msg::init(OBJECT *parent){
 							individual_message_type = config_info["message_type"].asString();
 							if( individual_message_type.compare("JSON") == 0 ) {
 								json_gld_pub = new json_helics_value_publication();
-								json_gld_pub->key = string(pub.getKey());
+								json_gld_pub->key = string(pub.getName());
 								json_gld_pub->objectPropertyBundle = config_info["publication_info"];
 								json_publication *gldProperty = NULL;
 								for(Json::ValueIterator it = json_gld_pub->objectPropertyBundle.begin(); it != json_gld_pub->objectPropertyBundle.end(); it++){
@@ -199,17 +199,17 @@ int helics_msg::init(OBJECT *parent){
 								json_helics_value_publications.push_back(json_gld_pub);
 							} else if( individual_message_type.compare("GENERAL") == 0 ){
 								gld_pub = new helics_value_publication();
-								gld_pub->key = string(pub.getKey());
+								gld_pub->key = string(pub.getName());
 								gld_pub->objectName = config_info["object"].asString();
 								gld_pub->propertyName = config_info["property"].asString();
 								gld_pub->HelicsPublication = pub;
 								helics_value_publications.push_back(gld_pub);
 							} else {
-								throw("The info field of the publication:%s defines an unknown message_type:%s. Valid message types are JSON and GENERAL", pub.getKey(), individual_message_type.c_str());
+								throw("The info field of the publication:%s defines an unknown message_type:%s. Valid message types are JSON and GENERAL", pub.getName(), individual_message_type.c_str());
 							}
 						} else {
 							gld_pub = new helics_value_publication();
-							gld_pub->key = string(pub.getKey());
+							gld_pub->key = string(pub.getName());
 							gld_pub->objectName = config_info["object"].asString();
 							gld_pub->propertyName = config_info["property"].asString();
 							gld_pub->HelicsPublication = pub;
@@ -226,27 +226,28 @@ int helics_msg::init(OBJECT *parent){
 							individual_message_type = config_info["message_type"].asString();
 							if( individual_message_type.compare("JSON") == 0 ) {
 								json_gld_sub = new json_helics_value_subscription();
-								json_gld_sub->key = string(sub.getKey());
+								json_gld_sub->key = string(sub.getTarget());
 								json_gld_sub->HelicsSubscription = sub;
 								json_helics_value_subscriptions.push_back(json_gld_sub);
 							} else if( individual_message_type.compare("GENERAL") == 0 ){
 								gld_sub = new helics_value_subscription();
-								gld_sub->key = string(sub.getKey());
+								gld_sub->key = string(sub.getTarget());
 								gld_sub->objectName = config_info["object"].asString();
 								gld_sub->propertyName = config_info["property"].asString();
 								gld_sub->HelicsSubscription = sub;
 								helics_value_subscriptions.push_back(gld_sub);
 							} else {
-								throw("The info field of the subscription:%s defines an unknown message_type:%s. Valid message types are JSON and GENERAL", sub.getKey(), individual_message_type.c_str());
+								throw("The info field of the subscription:%s defines an unknown message_type:%s. Valid message types are JSON and GENERAL", sub.getTarget(), individual_message_type.c_str());
 							}
 						} else {
 							gld_sub = new helics_value_subscription();
-							gld_sub->key = string(sub.getKey());
+							gld_sub->key = string(sub.getTarget());
 							gld_sub->objectName = config_info["object"].asString();
 							gld_sub->propertyName = config_info["property"].asString();
 							gld_sub->HelicsSubscription = sub;
 							helics_value_subscriptions.push_back(gld_sub);
 						}
+						gl_verbose("helics_msg::init(): Successfully processed helics subscription %s.", sub.getTarget());
 					}
 				}
 				for( idx = 0; idx < ep_count; idx++ ) {
@@ -342,7 +343,7 @@ int helics_msg::init(OBJECT *parent){
 					helicscpp::Publication pub = gld_helics_federate->getPublication(idx);
 					if(pub.isValid()) {
 						json_gld_pub = new json_helics_value_publication();
-						json_gld_pub->key = string(pub.getKey());
+						json_gld_pub->key = string(pub.getName());
 						config_info_temp = string(pub.getInfo());
 						json_reader.parse(config_info_temp, json_gld_pub->objectPropertyBundle);
 						json_publication *gldProperty = NULL;
@@ -364,7 +365,7 @@ int helics_msg::init(OBJECT *parent){
 					helicscpp::Input sub = gld_helics_federate->getSubscription(idx);
 					if(sub.isValid()){
 						json_gld_sub = new json_helics_value_subscription();
-						json_gld_sub->key = string(sub.getKey());
+						json_gld_sub->key = string(sub.getTarget());
 						json_gld_sub->HelicsSubscription = sub;
 						json_helics_value_subscriptions.push_back(json_gld_sub);
 					}
@@ -736,20 +737,20 @@ SIMULATIONMODE helics_msg::deltaClockUpdate(double t1, unsigned long timestep, S
 {
 #if HAVE_HELICS
 	if (t1 > last_delta_helics_time){
-//		helics::time helics_time = 0;
-		helics_time helics_t = 0;
+//		helics::time HelicsTime = 0;
+		HelicsTime helics_t = 0;
 //		helics::time t = 0;
-		helics_time t = 0;
+		HelicsTime t = 0;
 		double dt = 0;
 		int t_ns = 0;
 		int helics_t_ns = 0;
 		dt = (t1 - (double)initial_sim_time)*1000000000.0;
 		if(sysmode == SM_EVENT) {
-			t = (helics_time)(((dt + (1000000000.0 / 2.0)) - fmod((dt + (1000000000.0 / 2.0)), 1000000000.0))/1000000000.0);
+			t = (HelicsTime)(((dt + (1000000000.0 / 2.0)) - fmod((dt + (1000000000.0 / 2.0)), 1000000000.0))/1000000000.0);
 		} else {
-			t = (helics_time)(((dt + ((double)(timestep) / 2.0)) - fmod((dt + ((double)(timestep) / 2.0)), (double)timestep))/1000000000.0);
+			t = (HelicsTime)(((dt + ((double)(timestep) / 2.0)) - fmod((dt + ((double)(timestep) / 2.0)), (double)timestep))/1000000000.0);
 		}
-		gld_helics_federate->setProperty(helics_property_time_period, (helics_time)(((double)timestep)/DT_SECOND));
+		gld_helics_federate->setProperty(HELICS_PROPERTY_TIME_PERIOD, (HelicsTime)(((double)timestep)/DT_SECOND));
 		helics_t = gld_helics_federate->requestTime(t);
 		//TODO call helics time update function
 		if(sysmode == SM_EVENT)
@@ -781,7 +782,7 @@ TIMESTAMP helics_msg::clk_update(TIMESTAMP t1)
 #if HAVE_HELICS
 		//TODO update time delta in helics
 		gl_verbose("helics_msg: Calling setTimeDelta");
-		gld_helics_federate->setProperty(helics_property_time_period, 1.0);// 140 is the option for the period property.
+		gld_helics_federate->setProperty(HELICS_PROPERTY_TIME_PERIOD, 1.0);// 140 is the option for the period property.
 #endif
 		exitDeltamode = false;
 	}
@@ -820,12 +821,12 @@ TIMESTAMP helics_msg::clk_update(TIMESTAMP t1)
 			}
 		}
 #if HAVE_HELICS
-		helics_time t((double)((t1 - initial_sim_time)));
-//		helics_time = ((TIMESTAMP)helics::time_request(t))/1000000000 + initial_sim_time;
+		HelicsTime t((double)((t1 - initial_sim_time)));
+//		HelicsTime = ((TIMESTAMP)helics::time_request(t))/1000000000 + initial_sim_time;
 		//TODO call appropriate helics time update function
 		gl_verbose("helics_msg: Calling requestime");
 		gl_verbose("helics_msg: Requesting %f", (double)t);
-		helics_time rt;
+		HelicsTime rt;
 		rt = gld_helics_federate->requestTime(t);
 		gl_verbose("helics_msg: Granted %f", (double)rt);
 		helics_t = (TIMESTAMP)rt + initial_sim_time;
@@ -906,7 +907,7 @@ int helics_msg::publishVariables(){
 		message_buffer_stream.str(string());
 #if HAVE_HELICS
         try {
-			if(gld_helics_federate->getCurrentMode() == helics_state_execution){
+			if(gld_helics_federate->getCurrentMode() == HELICS_STATE_EXECUTION ){
 				gl_verbose("calling helics sendMessage");
 				helicscpp::Message *msg = new helicscpp::Message((*pub)->HelicsPublicationEndpoint);
 				msg->data(message_buffer);
@@ -1075,7 +1076,7 @@ int helics_msg::subscribeVariables(){
         gl_verbose("Has message status for endpoint %s: %s", (*sub)->name.c_str(), (*sub)->HelicsSubscriptionEndpoint.hasMessage() ? "True" : "False");
         if((*sub)->HelicsSubscriptionEndpoint.hasMessage()){
 			helicscpp::Message mesg;
-			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessages();
+			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessageCount();
 			for(int i = 0; i < pendingMessages; i++) {
 				gl_verbose("calling getMessage() for endpoint %s", (*sub)->name.c_str());
 				mesg = (*sub)->HelicsSubscriptionEndpoint.getMessage();
@@ -1133,7 +1134,7 @@ int helics_msg::subscribeVariables(){
 	for(vector<json_helics_endpoint_subscription*>::iterator sub = json_helics_endpoint_subscriptions.begin(); sub != json_helics_endpoint_subscriptions.end(); sub++){
 		if((*sub)->HelicsSubscriptionEndpoint.hasMessage()){
 			helicscpp::Message mesg;
-			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessages();
+			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessageCount();
 			for(int i = 0; i < pendingMessages; i++) {
 				gl_verbose("calling getMessage() for endpoint %s", (*sub)->name.c_str());
 				mesg = (*sub)->HelicsSubscriptionEndpoint.getMessage();
@@ -1358,7 +1359,7 @@ int helics_msg::subscribeJsonVariables(){
 	for(vector<json_helics_endpoint_subscription*>::iterator sub = json_helics_endpoint_subscriptions.begin(); sub != json_helics_endpoint_subscriptions.end(); sub++){
 		if((*sub)->HelicsSubscriptionEndpoint.hasMessage()){
 			helicscpp::Message mesg;
-			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessages();
+			int pendingMessages = (int) (*sub)->HelicsSubscriptionEndpoint.pendingMessageCount();
 			for(int i = 0; i < pendingMessages; i++) {
 				gl_verbose("calling getMessage() for endpoint %s", (*sub)->name.c_str());
 				mesg = (*sub)->HelicsSubscriptionEndpoint.getMessage();
diff --git a/connection/helics_msg.h b/connection/helics_msg.h
index 7a7512bc..1f838d81 100644
--- a/connection/helics_msg.h
+++ b/connection/helics_msg.h
@@ -16,14 +16,18 @@
 #undef OPTIONAL
 #endif
 #include <helics/helics98.hpp>
-//#include <helics/application_api/CombinationFederate.hpp>
-//#include <helics/application_api/Endpoints.hpp>
-//#include <helics/application_api/Inputs.hpp>
-//#include <helics/application_api/Publications.hpp>
+//#include <helics/helics.h>
+//#include <helics/cpp98/CombinationFederate.hpp>
+//#include <helics/cpp98/Endpoint.hpp>
+//#include <helics/cpp98/Input.hpp>
+//#include <helics/cpp98/Publication.hpp>
+//#include <helics/cpp98/helics.hpp>
+//#include <helics/cpp98/helicsExceptions.hpp>
+//#include <helics/cpp98/config.hpp>
 //#include <helics/helics_enums.h>
 #endif
-#include<sstream>
-#include<vector>
+#include <sstream>
+#include <vector>
 #include <string>
 #include <fstream>
 #include <sstream>
